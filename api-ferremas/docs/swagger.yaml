openapi: 3.0.0
info:
  title: API Ferremas
  version: 1.0.0
  description: API RESTful documentada con Swagger

servers:
  - url: http://127.0.0.1:4000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Producto:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        marca:
          type: string
        precio:
          type: number
        stock:
          type: number
        categoria:
          type: string
        imagen:
          type: string

    ItemCarrito:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        precio:
          type: number
        cantidad:
          type: integer

    Pedido:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemCarrito'
        usuario:
          type: object
          properties:
            id:
              type: string
            correo:
              type: string
            nombre:
              type: string
        estado:
          type: string
        fecha:
          type: string
          format: date-time

    PedidoInput:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemCarrito'

    RegistroUsuario:
      type: object
      properties:
        nombre:
          type: string
        correo:
          type: string
        password:
          type: string
        rol:
          type: string

    LoginUsuario:
      type: object
      properties:
        correo:
          type: string
        password:
          type: string

    UsuarioBase:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        correo:
          type: string
        rol:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 60c72b2f9b1d8c001f8e4d7a
        nombre:
          type: string
          example: Juan Pérez
        correo:
          type: string
          format: email
          example: juan.perez@ferremas.cl
        rol:
          type: string
          enum: [admin, bodeguero, contador, vendedor]
          example: bodeguero
      required:
        - id
        - nombre
        - correo
        - rol

paths:
  /api/auth/registro:
    post:
      summary: Registrar nuevo usuario
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistroUsuario'
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioBase'
        '400':
          description: El correo ya está registrado

  /api/auth/login:
    post:
      summary: Iniciar sesión
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUsuario'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Credenciales inválidas

  /api/auth/perfil:
    get:
      summary: Ver perfil del usuario autenticado
      tags: [Autenticación]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioBase'
        '401':
          description: Token inválido o no enviado

  /api/auth/cambiar-password:
    post:
      summary: Cambiar la contraseña del usuario autenticado
      tags: [Autenticación]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordActual:
                  type: string
                  example: "miPasswordActual"
                passwordNueva:
                  type: string
                  example: "miPasswordNueva"
      responses:
        '200':
          description: Contraseña actualizada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contraseña actualizada con éxito.
        '400':
          description: Error en la solicitud
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Contraseña actual incorrecta.
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token no proporcionado o inválido.

  /api/productos:
    get:
      summary: Obtener todos los productos
      tags: [Productos]
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'

    post:
      summary: Crear un nuevo producto
      tags: [Productos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producto'
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'

  /api/productos/{id}:
    get:
      summary: Obtener un producto por ID
      tags: [Productos]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'

    put:
      summary: Actualizar producto
      tags: [Productos]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producto'
      responses:
        '200':
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'

  /api/pedidos:
    get:
      summary: Ver todos los pedidos registrados
      tags: [Pedidos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pedido'

    post:
      summary: Crear un nuevo pedido
      tags: [Pedidos]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PedidoInput'
      responses:
        '201':
          description: Pedido creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'

  /api/pedidos/{id}:
    get:
      summary: Ver detalle de un pedido específico
      tags: [Pedidos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalle del pedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'

  /api/pedidos/{id}/estado:
    put:
      summary: Cambiar estado de un pedido
      tags: [Pedidos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                estado:
                  type: string
      responses:
        '200':
          description: Estado actualizado exitosamente

  /api/carrito:
    get:
      summary: Obtener el contenido actual del carrito
      tags: [Carrito]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Contenido actual del carrito
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemCarrito'

  /api/carrito/agregar:
    post:
      summary: Agregar producto al carrito
      tags: [Carrito]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCarrito'
      responses:
        '200':
          description: Producto agregado
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemCarrito'

  /api/carrito/remover:
    post:
      summary: Eliminar un producto del carrito
      tags: [Carrito]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Producto removido
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemCarrito'

  /api/carrito/finalizar:
    post:
      summary: Finalizar la compra y generar un pedido
      tags: [Carrito]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pedido generado desde el carrito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'

  /api/users:
    get:
      summary: Obtener todos los usuarios
      tags: [Usuarios]
      description: Recupera una lista de todos los usuarios registrados. Solo accesible por administradores.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Una lista de usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: No autorizado (token no proporcionado o inválido).
        '403':
          description: Prohibido (el usuario no tiene el rol de administrador).
    post:
      summary: Crear un nuevo usuario
      tags: [Usuarios]
      description: Crea un nuevo usuario en el sistema. Solo accesible por administradores.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
                - correo
                - password
                - rol
              properties:
                nombre:
                  type: string
                  example: Juan Pérez
                correo:
                  type: string
                  format: email
                  example: juan.perez@ferremas.cl
                password:
                  type: string
                  format: password
                  example: miContraseñaSegura123
                rol:
                  type: string
                  enum: [admin, bodeguero, contador, vendedor]
                  example: bodeguero
      responses:
        '201':
          description: Usuario creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Solicitud inválida.
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.

  /api/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags: [Usuarios]
      description: Recupera los detalles de un usuario específico por su ID. Solo accesible por administradores.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario.
      responses:
        '200':
          description: Detalles del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        '404':
          description: Usuario no encontrado.
    put:
      summary: Actualizar un usuario
      tags: [Usuarios]
      description: Actualiza los detalles de un usuario existente. Solo accesible por administradores.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: Juan NuevoNombre
                correo:
                  type: string
                  format: email
                  example: nuevo.correo@ferremas.cl
                password:
                  type: string
                  format: password
                  example: nuevaContraseñaSegura456
                rol:
                  type: string
                  enum: [admin, bodeguero, contador, vendedor]
                  example: contador
      responses:
        '200':
          description: Usuario actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Solicitud inválida.
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        '404':
          description: Usuario no encontrado.
    delete:
      summary: Eliminar un usuario
      tags: [Usuarios]
      description: Elimina un usuario del sistema por su ID. Solo accesible por administradores.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario a eliminar.
      responses:
        '204':
          description: Usuario eliminado exitosamente (sin contenido).
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        '404':
          description: Usuario no encontrado.
